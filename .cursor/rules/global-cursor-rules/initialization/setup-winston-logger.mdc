---
description: Instructions for setting up Winston logger during project initialization
alwaysApply: false
---

# Winston Logger Setup Instructions

This rule provides instructions for setting up Winston logger with standardized formatting and developer experience features.

## Technical Requirements

1. Console Output Format
   - Use ISO 8601 timestamps
   - Include clickable VSCode file links
   - Color-code different elements:
     * Strings: green
     * Numbers: white
     * Booleans: yellow
     * Null/undefined: dim
     * Keys: cyan
   - Indent JSON with 2 spaces
   - Truncate arrays longer than 10 elements

2. Log Entry Structure
   ```typescript
   interface LogEntry {
     message: string;      // Human-readable description
     [key: string]: any;   // Additional context fields
   }
   ```

## Implementation Steps

1. Install Dependencies
   ```bash
   npm install winston@^3.11.0 chalk@^4.1.2
   ```

2. Create `src/utils/logger.ts`:

```typescript
import winston from 'winston';
import chalk from 'chalk';
import path from 'path';

// Helper to get caller location for VSCode links
const getCallerLocation = () => {
  const error = new Error();
  const stack = error.stack?.split('\n')[3];
  const match = stack?.match(/\((.*):(\d+):(\d+)\)/);
  return match ? {
    file: path.relative(process.cwd(), match[1]),
    line: match[2],
    column: match[3]
  } : { file: 'unknown', line: '0', column: '0' };
};

// Helper to truncate large arrays
const truncateArrays = (obj: any, maxLength = 10): any => {
  if (Array.isArray(obj)) {
    return obj.length > maxLength 
      ? [...obj.slice(0, maxLength), `... ${obj.length - maxLength} more items`]
      : obj;
  }
  if (obj && typeof obj === 'object') {
    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [key, truncateArrays(value)])
    );
  }
  return obj;
};

// Format for colorized JSON output
const colorizedJson = winston.format((info) => {
  const { message, ...metadata } = info;
  const stringified = JSON.stringify(truncateArrays(metadata), null, 2);
  info.formattedMetadata = stringified.replace(
    /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,
    (match) => {
      let color = chalk.white;
      if (/^"/.test(match)) {
        color = /:$/.test(match) ? chalk.cyan : chalk.green;
      } else if (/true|false/.test(match)) {
        color = chalk.yellow;
      } else if (/null/.test(match)) {
        color = chalk.dim;
      }
      return color(match);
    }
  );
  return info;
})();

// Create logger instance
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'YYYY-MM-DDTHH:mm:ss.SSSZ' }), // ISO 8601
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        winston.format.printf((info) => {
          const { timestamp, level, message, formattedMetadata } = info;
          const location = getCallerLocation();
          const locationStr = `[${location.file}:${location.line}:${location.column}]`;
          return `${timestamp} ${level}: ${locationStr} ${message}\n${formattedMetadata}`;
        }),
        colorizedJson
      )
    })
  ]
});

// Type for log entry
type LogEntry = {
  message: string;
  [key: string]: any;
};

// Export wrapper with type-safe methods
export const Logger = {
  info: (entry: LogEntry) => logger.info(entry),
  error: (entry: LogEntry) => logger.error(entry),
  warn: (entry: LogEntry) => logger.warn(entry),
  debug: (entry: LogEntry) => logger.debug(entry)
};
```

3. Create `.env` configuration:
```env
LOG_LEVEL=debug  # Use 'info' in production
```

## Usage Examples

```typescript
import { Logger } from '@/utils/logger';

// Basic usage
Logger.info({
  message: 'Server started',
  port: 3000,
  environment: process.env.NODE_ENV
});

// With large arrays (will be truncated)
Logger.debug({
  message: 'Search results',
  query: 'test',
  results: largeArray,
  totalResults: largeArray.length
});

// Error logging
try {
  // ... code that might throw
} catch (error) {
  Logger.error({
    message: 'Operation failed',
    error: error.message,
    stack: error.stack,
    context: {
      operation: 'processPayment',
      orderId: '123'
    }
  });
}

// HTTP request logging
Logger.info({
  message: 'Outgoing API request',
  method: 'POST',
  url: 'https://api.example.com/users',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer [REDACTED]'
  },
  body: {
    username: 'john_doe',
    email: '[REDACTED]'
  }
});
```

## Verification Checklist

1. Console Output
   - [ ] Timestamps are in ISO 8601 format
   - [ ] File locations are clickable in VSCode
   - [ ] JSON is properly indented
   - [ ] Colors are applied correctly
   - [ ] Large arrays are truncated
   - [ ] Object fields are properly formatted

2. Log Levels
   - [ ] All log levels (error, warn, info, debug) work
   - [ ] LOG_LEVEL environment variable is respected

3. Metadata
   - [ ] All fields except 'message' are shown in the metadata section
   - [ ] Objects are properly serialized
   - [ ] No circular reference errors
   - [ ] Sensitive data is properly handled 